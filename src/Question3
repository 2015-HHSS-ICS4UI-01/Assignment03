The maximum number of comparisons needed for binary search on a list of 7 items, is 3.
In the worst case scenario, the number that is being searched for is at the start/end of the array, or not in the array at all.
Because binary search starts from the middle, it will take significantly longer to reach the number, than
if it had been closer to the middle number.

Example:

Take this set of numbers, and perform a binary search for 14, the number at the start of the array:

[0] [1] [2] [3] [4] [5] [6]
14, 24, 35, 38, 40, 56, 60

Program finds the sum of end point (0) and start point (6), and divides by 2 for a mid point of 3
0 + 6 / 2 = 3
Program checks number at position 3 (38) to see if it is equal to 14 (Comparison #1).
38 > 14
Since 3 (38) is greater than 14, program changes the ending point to one less than the compared number, 2
0 + 2 / 2 = 1
Program checks number at position 1 (24) to see if it is equal to 14 (Comparison #2).
24 > 14
Since 1 (24) is greater than 14, program changes the ending point to one less than the compared number, 0
0 + 0 / 2 = 0
Program checks number at position 0 (14), to see if it is equal to 14 (Comparison #3).
14 == 14

The program, to find 14, had to compare the number to 3 positions: 3 (38), 1 (24), and 0 (14).