A3Q1: 
[23, 27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96]

Sequential Search:
start for loop at the beginning of the array .
It goes through every number in the array until it find the place in the array
then outputs the spot of the array the number is at
a)  Find 72.
    Is 23 equal to 72? No. Move on to the next number.
    Is 27 equal to 72? No. Move on to the next number.
    Is 30 equal to 72? No. Move on to the next number.
    Is 34 equal to 72? No. Move on to the next number.
    Is 41 equal to 72? No. Move on to the next number.
    Is 51 equal to 72? No. Move on to the next number.
    Is 55 equal to 72? No. Move on to the next number.
    Is 57 equal to 72? No. Move on to the next number.
    Is 60 equal to 72? No. Move on to the next number.
    Is 67 equal to 72? No. Move on to the next number.
    Is 72 equal to 72? Yes. Return the position in the array it is in. Return 10.

b)  Find 41.
    Is 23 equal to 41? No. Move on to the next number.
    Is 27 equal to 41? No. Move on to the next number.
    Is 30 equal to 41? No. Move on to the next number.
    Is 34 equal to 41? No. Move on to the next number.
    Is 41 equal to 41? Yes. Return the position in the array it is in. Return 4.

c)  Find 50
    Is 23 equal to 50? No. Move on to the next number.
    Is 27 equal to 50? No. Move on to the next number.
    Is 30 equal to 50? No. Move on to the next number.
    Is 34 equal to 50? No. Move on to the next number.
    Is 41 equal to 50? No. Move on to the next number.
    Is 51 equal to 50? Since 51 is greater than 51, return -1, meaning that the inputted number is not in the array.
 

Binary Search:

Binary search will first find the middle array spot and determine if it is greater or less than the the number being search for.
If the number is less than the middle number it will check if the middle number is the number being search for,
and if not it will disregard the middle number and all numbers bigger than the middle number
and the smallest number stays the same and the last spot becomes the array value before the middle array value .
If the number is greater than the middle number it will check if the middle number is the number being search for,
and if not it will disregard the middle number and all numbers smaller than the middle number 
and the smallest spot becomes the array value after the middle array value and the last spot stays the same.
This same process will continue until the number is found

[23, 27, 30, 34, 41, 51, 55, 57, 60, 67, 72, 78, 83, 96]

a)  Find 72.
    How long is the array? 13. 
    Divide 13 by 2.
    What is the number in spot 7? 55.
    Is 55 equal to 72? No. 
    Is 72 greater then 55? Yes. Go to the right of the array and  disregard the middle number and all numbers less than the middle number.
    [57, 60, 67, 72, 78, 83, 96]
    How long is the array? 7. 
    Divide 7 by 2.
    What is the number in spot 3? 72. 
    Is 55 equal to 72? Yes. Return the spot in the array that the number is in.
    
b)  Find 41.
    How long is the array? 13. 
    Divide 13 by 2.
    What is the number in spot 7? 55.
    Is 55 equal to 41? No.
    Is 41 smaller then 55? Yes. Go to the left of the array and  disregard the middle number and all numbers greater than the middle number.
    [23, 27, 30, 34, 41, 51]
    How long is the array? 5. 
    Divide 5 by 2.
    What is the number in spot 2? 30. 
    Is 41 equal to 30? No. 
    Is 41 greater then 30? Yes. Go to the right of the array and  disregard the middle number and all numbers less than the middle number.
    [34,41,51]
    How long is the array? 3. 
    Divide 3 by 2.
    What is the number in spot 1? 41. 
    Is 41 equal to 41? Yes. Return the spot in the array that the number is in.

c)  Find 50. 
    How long is the array? 13. 
    Divide 13 by 2.
    What is the number in spot 7? 55.
    Is 55 equal to 50? No.
    Is 50 smaller then 55? Yes. Go to the left of the array and disregard the middle number and all numbers greater than the middle number.
    [23, 27, 30, 34, 41, 51]
    How long is the array? 5. 
    Divide 5 by 2.
    What is the number in spot 2? 30. 
    Is 50 equal to 30? No. 
    Is 50 greater then 30? Yes. Go to the right of the array and disregard the middle number and all numbers less than the middle number.
    [34,41,51]
    How long is the array? 3. 
    Divide 3 by 2.
    What is the number in spot 1? 41. 
    Is 50 equal to 41? No.
    Is 50 greater then 41?Yes. Go to the right of the array and disregard the middle number and all numbers less than the middle number.
    [51]
    Is 50 equal to 51? No. Since there are no more unchecked spots in the array. Return -1


Q2:

 Numbers in array: {25  30  20  80  40  60}

let x represent the places that are being looked at and being shifted

25 30 20 80 40 60
   x  x
25 20 30 80 40 60
x  x
20 25 30 80 40 60
         x  x 
20 25 30 40 80 60
            x  x
20 25 30 40 60 80




Q3: 

Numbers in array: {5 12 24 30 37 45 53}

let the program search for a number that is not in the list,
to see the maximum amount of searches that would be done in an array of seven numbers.

the maximum amount of searches the binary search will do is 3

search for a number not in the array.
e.g 42

(first search)
it will check if the number is bigger or smaller than 30
{5 12 24 30 37 45 53} 

since it is it will disregard the middle number and all lower numbers
{37 45 53}

(second search)
it will check if the number is bigger or smaller than 45

since it is it will disregard the middle number and all higher numbers
{37 45}

(third search)
it will check if the number is 37

since it is not, it will exit the program  



Q4:

In the worst case scenario, insertion sort and selection sort are both equally as fast. 
However with smaller arrays where the array is already mostly sorted or completely sorted, 
insertion sort is more efficient than selection sort because with insertion sort the method will only go through the array once,
but with selection sort,
the method will still compare each number in the array with the next number which is n^2 searches 
(where n represents the amount of numbers in the array)
